service: cognito-example

provider:
  name: aws
  runtime: nodejs12.x
  region: us-east-2
  stage: ${opt:stage, "dev"}

custom:
  userPoolName: ${self:service}-user-pool-${self:provider.stage}
  userPoolClientName: ${self:service}-user-pool-client-${self:provider.stage}
  adminUserPoolGroupName: ${self:service}-admin-user-pool-group-${self:provider.stage}

resources:
  Resources:
    CognitoUserPool:
      Type: AWS::Cognito::UserPool
      Properties:
        UserPoolName: ${self:custom.userPoolName}
        UsernameAttributes:
          - email
        UsernameConfiguration:
          CaseSensitive: false
        Policies:
          PasswordPolicy:
            MinimumLength: 8
            RequireLowercase: false
            RequireNumbers: false
            RequireSymbols: false
            RequireUppercase: false
            TemporaryPasswordValidityDays: 7

    CognitoUserPoolClient:
      Type: AWS::Cognito::UserPoolClient
      Properties:
        ClientName: ${self:custom.userPoolClientName}
        GenerateSecret: false
        UserPoolId:
          Ref: CognitoUserPool
        ExplicitAuthFlows:
          - ALLOW_ADMIN_USER_PASSWORD_AUTH
          - ALLOW_USER_SRP_AUTH
          - ALLOW_REFRESH_TOKEN_AUTH
        PreventUserExistenceErrors: ENABLED

    AdminUserPoolGroup:
      Type: AWS::Cognito::UserPoolGroup
      Properties:
        GroupName: ${self:custom.adminUserPoolGroupName}
        UserPoolId:
          Ref: CognitoUserPool
        Precedence: 0
#        RoleArn:
